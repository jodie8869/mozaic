function point(){var a=Array.prototype.slice.call(arguments,0)[0];this._vals=[];this._k=0;this.init=function(){if(typeof a==="number"){this._k=a;for(var b=0;b<this._k;b+=1){this._vals.push(0)}}else{this._k=a.length;this._vals=a}};this.at=function(b){if(b>=this._k){throw"Point index out of range (index: "+b+",k: "+this._k+")"}return this._vals[b]};this.set=function(b,c){if(b>=this._k){throw"Point index out of range (index: "+b+",k: "+this._k+")"}this._vals[b]=c};this.equals=function(b){return(this===b)};this.lessThan=function(d){var b=true;for(var c=0;c<this._k;c+=1){b&=(this._vals[c]<d.at(c))}return b};this.toString=function(){return"("+this._vals.toString()+", "+this._k+")"}}function kdtree(){this._points=Array.prototype.slice.call(arguments,0)[0];this._k=Array.prototype.slice.call(arguments,1)[0];this._pointIndex=[];this.init=function(){var a=this._points.length;for(var b=0;b<a;b+=1){this._pointIndex.push(b)}this._buildTree(0,a,0)};this.findNearestNeighbor=function(e){if(this._points.length===0){return null}var h=0,a=this._points.length,g=0,b=Math.floor((h+a)/2),c=this._pointIndex[b],f=this._points[c];return this._nn(e,f,h,a,g)};this._buildTree=function(e,a,c){var b;if(a-e<=0){return}this._sort(e,a,c);b=Math.floor((e+a)/2);c=(c+1)%this._k;this._buildTree(e,b-1,c);this._buildTree(b+1,a,c)};this._sort=function(h,b,f){var g=this._pointIndex.slice(h,b),a=g.length,e=this;g.sort(function(i,d){return e._smallerDimVal(e._points[i],e._points[d],f)});for(var c=0;c<a;c+=1){this._pointIndex[h+c]=g[c]}};this._nn=function(k,g,c,h,m){var o=Math.floor((c+h)/2),f=this._pointIndex[o],n=this._points[f],j,a,b,i,e,l;if(typeof n==="undefined"){return g}if(h-c<=0){if(this._shouldReplace(k,g,n)){return n}return g}else{if(this._smallerDimVal(k,n,m)){g=this._nn(k,g,c,o-1,(m+1)%this._k);if(!this._shouldReplace(k,g,n)){return g}g=n;j=this._distance(k,g);a=Math.floor((o+1+h)/2);if(this._isInBounds(a)){i=this._pointIndex[a];l=this._distance(k,this._points[i]);if(l<j){g=this._nn(k,g,o+1,h,(m+1)%this._k)}}return g}else{g=this._nn(k,g,o+1,h,(m+1)%this._k);if(!this._shouldReplace(k,g,n)){return g}g=n;j=this._distance(k,g);b=Math.floor((c+o-1)/2);if(this._isInBounds(b)){e=this._pointIndex[b];l=this._distance(k,this._points[e]);if(l<j){g=this._nn(k,g,c,o-1,(m+1)%this._k)}}return g}}};this._smallerDimVal=function(e,c,f){return(e.at(f)<c.at(f))};this._shouldReplace=function(e,d,a){var b=this._distance(e,d);var c=this._distance(e,a);return(b===c)?a.lessThan(d):(c<b)};this._distance=function(d,c){var f=0;for(var e=0;e<this._k;e+=1){f+=(d.at(e)-c.at(e))*(d.at(e)-c.at(e))}return f};this._isInBounds=function(a){return((a>=0)&&(a<this._points.length))};this.toString=function(){var f="",b=this._pointIndex.length,g=0,a=b,c,e;if(a-g<=0){return"The tree is empty (>^.^)>"}for(var d=0;d<b;d+=1){c=this._pointIndex[d];e=this._points[c];f+=e.toString()+" "}return f}}(function(a){a.fn.mozaic=function(){var c=Array.prototype.slice.call(arguments,0),d=this,b=d[0],f,e;if(!d.is("canvas")){throw"Wrong tag for mozaic, please use it on a canvas (-I.I-)"}if(typeof c[0]!=="undefined"){f=c[0];if(typeof f.data==="string"){a.getJSON(f.data,function(g){e=g;console.log(g)})}else{e=f.data}}else{throw"Please provide a data set <(*.*<)"}console.log(b);console.log(b.width,b.height)}})(jQuery);